name: Deploy to Raspberry Pi

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production-pi # Name of your GitHub Environment

    # These 'env' are for the GitHub Actions runner environment,
    # primarily to make them easily available for the frontend build step if needed directly in the runner
    # or for clarity if passed into the SSH script.
    env:
      # Sourced from your GitHub Environment's secrets & variables
      VITE_APP_RECAPTCHA_SITE_KEY_FOR_BUILD: ${{ secrets.VITE_APP_RECAPTCHA_SITE_KEY }}
      VITE_APP_API_URL_FOR_BUILD: ${{ vars.VITE_APP_API_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Updated to a more recent version

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # Sourced from Environment Secret

      - name: Deploy to Raspberry Pi and Build Frontend
        # This 'env' block makes GitHub secrets/vars available as shell variables INSIDE this 'run' script block
        # These are then used within the SSH heredoc.
        env:
          # Secrets for backend runtime (to be written to file on Pi)
          SECRET_WEBSOCKET: ${{ secrets.WEBSOCKET_SECRET }}
          SECRET_JWT_KEY: ${{ secrets.JWT_SECRET_KEY }}
          SECRET_DB_CONN_STRING: ${{ secrets.DATABASESETTINGS__CONNECTIONSTRING }}
          SECRET_SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SECRET_RECAPTCHA_KEY: ${{ secrets.RECAPTCHA_SECRET_KEY }}
          SECRET_SMTP_INFO_PASSWORD: ${{ secrets.SMTP_PASSWORD_INFO }}
          
          # Configuration Variables for backend runtime (to be written to file on Pi)
          VAR_ASPNETCORE_ENV: ${{ vars.APP_ASPNETCORE_ENVIRONMENT }}
          VAR_DOTNET_TELEMETRY: ${{ vars.APP_DOTNET_PRINT_TELEMETRY }}
          VAR_ALLOW_TEST_EMAILS: ${{ vars.APP_ALLOW_TEST_EMAILS }}
        run: |
          # Target Pi details 
          PI_USER_HOST="pi@155.4.68.41" 
          PI_PORT="2222"
          # Path to the environment file on the Pi 
          PI_ENV_FILE_PATH="/etc/default/steenbudget" 

          ssh -o StrictHostKeyChecking=no -p $PI_PORT $PI_USER_HOST << EOF
            set -e # Exit immediately if a command exits with a non-zero status.

            echo ">>> Setting PATH for dotnet..."
            export PATH="\$PATH:/usr/share/dotnet:/usr/bin:/home/pi/.dotnet/tools" 
            echo ">>> PATH is now: \$PATH"
            
            echo ">>> Creating/Updating environment file on Raspberry Pi: $PI_ENV_FILE_PATH"
            # Using sudo tee to write/overwrite the file as root. First line uses >, subsequent use -a to append.
            # Secrets for backend runtime
            echo "WEBSOCKET_SECRET='$SECRET_WEBSOCKET'" | sudo tee "$PI_ENV_FILE_PATH" > /dev/null
            echo "JWT_SECRET_KEY='$SECRET_JWT_KEY'" | sudo tee -a "$PI_ENV_FILE_PATH" > /dev/null
            echo "DatabaseSettings__ConnectionString='$SECRET_DB_CONN_STRING'" | sudo tee -a "$PI_ENV_FILE_PATH" > /dev/null
            echo "SMTP_PASSWORD='$SECRET_SMTP_PASSWORD'" | sudo tee -a "$PI_ENV_FILE_PATH" > /dev/null
            echo "RECAPTCHA_SECRET_KEY='$SECRET_RECAPTCHA_KEY'" | sudo tee -a "$PI_ENV_FILE_PATH" > /dev/null
            echo "SMTP_PASSWORD_INFO='$SECRET_SMTP_INFO_PASSWORD'" | sudo tee -a "$PI_ENV_FILE_PATH" > /dev/null
            
            # Configuration Variables for backend runtime
            echo "ASPNETCORE_ENVIRONMENT='$VAR_ASPNETCORE_ENV'" | sudo tee -a "$PI_ENV_FILE_PATH" > /dev/null
            echo "DOTNET_PRINT_TELEMETRY_MESSAGE='$VAR_DOTNET_TELEMETRY'" | sudo tee -a "$PI_ENV_FILE_PATH" > /dev/null
            echo "ALLOW_TEST_EMAILS='$VAR_ALLOW_TEST_EMAILS'" | sudo tee -a "$PI_ENV_FILE_PATH" > /dev/null

            echo ">>> Setting permissions for environment file: $PI_ENV_FILE_PATH"
            sudo chown root:root "$PI_ENV_FILE_PATH"
            sudo chmod 600 "$PI_ENV_FILE_PATH" # Only root can read/write

            echo ">>> Navigating to /home/pi/SteenBudgetSolution"
            cd /home/pi/SteenBudgetSolution

            echo ">>> Resetting local changes..."
            # Fetch the latest state of the master branch from the remote repository
            git fetch origin master
            # Force the local master branch to match the remote master branch exactly
            git reset --hard origin/master 
            # Remove any untracked files and directories
            git clean -fdx # -x also removes ignored files, use -fd if you want to keep ignored files

            echo ">>> Current Git Status (should be clean and up-to-date with origin/master):"
            git status
            echo ">>> Latest commit:"
            git log -1 --pretty=format:"%h - %s (%an, %ar)"
            
            # Ensure necessary directories exist (idempotent)
            sudo mkdir -p /var/www/backend
            sudo mkdir -p /var/www/html

            # Fix permissions for backend directory
            sudo chmod -R 777 /var/www/backend 

            echo ">>> Publishing backend..."
            cd Backend
            
            echo ">>> Restoring NuGet packages for backend..."
            dotnet restore ./Backend.csproj 
            
            dotnet publish ./Backend.csproj -c Release -o /var/www/backend --self-contained false --no-restore 

            echo ">>> Building and deploying frontend..."
            cd ../Frontend
            # Clean install for frontend dependencies
            rm -rf node_modules dist
            npm install 
            
           
            # VITE variables are passed directly to the npm run build command
            # These come from the job-level 'env' block, which sources them from GitHub Environment secrets/vars
            VITE_APP_RECAPTCHA_SITE_KEY="$VITE_APP_RECAPTCHA_SITE_KEY_FOR_BUILD" \
            VITE_APP_API_URL="$VITE_APP_API_URL_FOR_BUILD" \
            npm run build
            
            echo ">>> Deploying frontend to /var/www/html/"
            sudo rm -rf /var/www/html/*
            sudo cp -r dist/* /var/www/html/
            sudo chmod -R 755 /var/www/html # Standard web server read permissions

            echo ">>> Reloading systemd and restarting services..."
            sudo systemctl daemon-reload # Crucial because EnvironmentFile content changed
            sudo systemctl restart steenbudget.service
            sudo systemctl restart nginx
            
            echo ">>> Deployment complete."
            # For debugging, review this in GitHub Actions logs. 

             sudo tail -n 10 "$PI_ENV_FILE_PATH"
          EOF