# .github/workflows/cicd.yml

name: CI-CD (Pi, multi-arch)

on:
  push:
    branches: [ master ] 
    paths:
      - "Backend/**"
      - "Frontend/**"
      - "caddy/**"
      - "docker-compose.yml"
      - ".github/workflows/cicd.yml"
  workflow_dispatch:

env:
  IMAGE: ghcr.io/${{ github.repository }}
jobs:
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: production-pi
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            -t $IMAGE:${{ github.sha }} \
            -t $IMAGE:latest \
            -f Backend/Dockerfile \
            --push .

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: Frontend/package-lock.json

      - name: Build and archive frontend
        working-directory: Frontend
        env:
          VITE_APP_API_URL: ${{ vars.VITE_APP_API_URL }}
          VITE_APP_RECAPTCHA_SITE_KEY: ${{ vars.VITE_APP_RECAPTCHA_SITE_KEY }}
        run: |
          npm ci
          npm run build
          tar czf dist.tar.gz dist

      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: Frontend/dist.tar.gz

  deploy:
    name: Deploy to Production
    runs-on: [self-hosted, pi, deploy] # Your Pi3 runner
    needs: build
    environment: production-pi
    steps:
      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: .

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.PROD_SSH_KEY_ANON }}
            ${{ secrets.PROD_SSH_KEY_DEPLOY }}

      - name: Deploy and Verify on Pi4
        env:
          PI4_HOST: anon@192.168.50.61
          PI4_DEPLOY_HOST: deploy@192.168.50.61
          PROJECT_PATH: /opt/steenbudget
        run: |
          echo ">>> 1. Shipping frontend package to Pi4..."
          scp -P 2222 -o StrictHostKeyChecking=accept-new \
            ./dist.tar.gz \
            $PI4_HOST:$PROJECT_PATH/

          echo ">>> 2. Unpacking frontend on Pi4..."
          ssh -p 2222 $PI4_HOST << EOF
            set -e
            cd $PROJECT_PATH
            echo "Unpacking..."
            rm -rf ./frontend/dist
            tar xzf dist.tar.gz -C ./frontend/
            # Ensure correct ownership (root) and permissions for Caddy
            sudo chown -R root:root ./frontend/dist
            sudo chmod -R 755 ./frontend/dist
            rm dist.tar.gz
          EOF

          echo ">>> 3. Triggering final forced-command deploy script..."
          # We don't need '|| true'. If the deploy script fails, the workflow SHOULD fail.
          ssh -T -p 2222 $PI4_DEPLOY_HOST

          echo ">>> 4. Confirming services and health check..."
          sleep 10 # Give services time to restart before health check
          ssh -p 2222 $PI4_HOST << EOF
            echo "--- Service Status ---"
            docker compose -f $PROJECT_PATH/docker-compose.yml ps
            echo "--- Health Check ---"
            # Use curl's fail flag to exit with an error code if HTTP status is not 2xx
            curl --fail -sS https://ebudget.se/api/login/health
          EOF
