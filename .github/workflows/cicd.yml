  # .github/workflows/cicd.yml
  name: CI-CD (Pi, multi-arch)

  on:
    push:
      branches: [ master ]
      paths:
        - "Backend/**"
        - "Frontend/**"
        - "caddy/**"
        - "docker-compose.yml"
        - ".github/workflows/cicd.yml"
    workflow_dispatch:

  # Avoid overlapping prod deploys
  concurrency:
    group: production-pi
    cancel-in-progress: false

  env:
    IMAGE: ghcr.io/${{ github.repository_owner }}/steenbudget-backend
    CADDY_IMAGE: ghcr.io/${{ github.repository_owner }}/caddy-cloudflare
    CADDY_VERSION: "2.9.1"

  jobs:
    # Detect whether caddy/** changed (to decide if we build Caddy)
    changes:
      runs-on: ubuntu-latest
      outputs:
        caddy: ${{ steps.filter.outputs.caddy }}
      steps:
        - uses: actions/checkout@v4
        - id: filter
          uses: dorny/paths-filter@v3
          with:
            filters: |
              caddy:
                - 'caddy/**'
    test:
      name: Run Unit Tests
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Setup .NET
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: '8.0.x' 

        - name: Run unit tests
          run: dotnet test --filter "TestCategory=Unit" --verbosity normal

    integration-tests:
      name: Run Integration Tests (Testcontainers)
      runs-on: ubuntu-latest
      needs: test
      timeout-minutes: 20

      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: 1
        DOTNET_ROLL_FORWARD: LatestMajor
        # Optional: if GH runners ever block reaper health checks, this relaxes TC pre-checks
        # TESTCONTAINERS_CHECKS_DISABLE: true

      steps:
        - uses: actions/checkout@v4

        - uses: actions/setup-dotnet@v4
          with:
            dotnet-version: '8.0.x'
            cache: true

        - name: Restore
          run: dotnet restore

        - name: Run integration tests (MariaDB via Testcontainers)
          run: dotnet test --filter "TestCategory=Integration" --verbosity normal

        - name: Docker diagnostics on failure
          if: failure()
          run: |
            echo "== docker ps -a ==" && docker ps -a || true
            echo "== docker images ==" && docker images || true
            echo "== docker system df ==" && docker system df || true
            echo "== guess MariaDB container logs =="
            docker ps -a --format '{{.ID}} {{.Image}} {{.Names}}' | grep -i maria || true
            cid=$(docker ps -aq --filter "ancestor=mariadb:11.4" | head -n1)
            if [ -n "$cid" ]; then docker logs "$cid" || true; fi

    build:
      name: Build Artifacts
      runs-on: ubuntu-latest
      needs: [changes, test, integration-tests] 
      permissions:
        contents: read
        packages: write
      environment: production-pi
      steps:
        - uses: actions/checkout@v4

        - uses: docker/setup-qemu-action@v3
        - uses: docker/setup-buildx-action@v3

        - name: Login to GHCR
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner}}     
            password: ${{ secrets.GITHUB_TOKEN }}

        - name: Build & push backend (linux/amd64, linux/arm64)
          run: |
            docker buildx build \
              --platform linux/amd64,linux/arm64 \
              -t $IMAGE:${{ github.sha }} \
              -t $IMAGE:latest \
              -f Backend/Dockerfile \
              --label org.opencontainers.image.source=https://github.com/${{ github.repository }} \
              --push .

        # Build Caddy only if caddy/** changed (arm64 only, with cache)
        - name: Build & push Caddy (Cloudflare DNS, arm64 only, cached)
          if: needs.changes.outputs.caddy == 'true'
          run: |
            docker buildx build \
              --platform linux/arm64 \
              --cache-from type=gha \
              --cache-to type=gha,mode=max \
              -t $CADDY_IMAGE:${CADDY_VERSION} \
              -t $CADDY_IMAGE:latest \
              -f caddy/Dockerfile \
              --build-arg CADDY_VERSION=${CADDY_VERSION} \
              --push caddy

        - name: Setup Node
          uses: actions/setup-node@v4
          with:
            node-version: 20
            cache: npm
            cache-dependency-path: Frontend/package-lock.json

        - name: Build and archive frontend
          working-directory: Frontend
          env:
            VITE_APP_API_URL: ${{ vars.VITE_APP_API_URL }}
            VITE_APP_RECAPTCHA_SITE_KEY: ${{ vars.VITE_APP_RECAPTCHA_SITE_KEY }}
          run: |
            npm ci
            npm run build
            printf '{"git_sha":"%s","built_at":"%s"}\n' "${GITHUB_SHA}" "$(date -u +%FT%TZ)" > dist/build-meta.json
            tar czf dist.tar.gz -C dist .

        - name: Upload frontend artifact
          uses: actions/upload-artifact@v4
          with:
            name: frontend-dist
            path: Frontend/dist.tar.gz
            retention-days: 3

    deploy:
        name: Deploy to Production
        runs-on: [self-hosted, pi, deploy]
        needs: build
        environment: production-pi
        steps:
        - name: Download frontend artifact
          uses: actions/download-artifact@v4
          with:
            name: frontend-dist
            # optional but nice: put it somewhere explicit
            path: .

        - name: Stream artifact to forced-command deploy script
          env:
            PI4_DEPLOY_HOST: deploy@192.168.50.61
          run: |
            set -euo pipefail
            ART=dist.tar.gz
            test -f "$ART" || { echo "$ART missing"; ls -la; exit 1; }
            ssh -T -p 2222 -i /home/runner/.ssh/deploy_pi3 \
              -o IdentitiesOnly=yes -o StrictHostKeyChecking=accept-new \
              "$PI4_DEPLOY_HOST" < "$ART"


